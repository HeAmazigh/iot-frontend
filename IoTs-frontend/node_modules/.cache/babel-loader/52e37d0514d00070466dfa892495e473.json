{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mazigh/Desktop/iots/IoTs-frontend/src/layout/AdminLayout/index.js\";\nimport React, { Component, Suspense } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Fullscreen from \"react-full-screen\";\nimport windowSize from 'react-window-size';\nimport Navigation from './Navigation';\nimport NavBar from './NavBar';\nimport Breadcrumb from './Breadcrumb';\nimport Loader from \"../Loader\";\nimport routes from \"../../util/routes\";\nimport Aux from \"../../hoc/_Aux\";\nimport * as actionTypes from \"../../store/actions\";\nimport './app.scss';\n\nclass AdminLayout extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fullScreenExitHandler = () => {\n      if (!document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n        this.props.onFullScreenExit();\n      }\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.windowWidth > 992 && this.props.windowWidth <= 1024 && this.props.layout !== 'horizontal') {\n      this.props.onComponentWillMount();\n    }\n  }\n\n  mobileOutClickHandler() {\n    if (this.props.windowWidth < 992 && this.props.collapseMenu) {\n      this.props.onComponentWillMount();\n    }\n  }\n\n  render() {\n    /* full screen exit call */\n    document.addEventListener('fullscreenchange', this.fullScreenExitHandler);\n    document.addEventListener('webkitfullscreenchange', this.fullScreenExitHandler);\n    document.addEventListener('mozfullscreenchange', this.fullScreenExitHandler);\n    document.addEventListener('MSFullscreenChange', this.fullScreenExitHandler);\n    const menu = routes.map((route, index) => {\n      return route.component ? /*#__PURE__*/_jsxDEV(Route, {\n        path: route.path,\n        exact: route.exact,\n        name: route.name,\n        render: props => /*#__PURE__*/_jsxDEV(route.component, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this) : null;\n    });\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: /*#__PURE__*/_jsxDEV(Fullscreen, {\n        enabled: this.props.isFullScreen,\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pcoded-main-container\",\n          onClick: () => this.mobileOutClickHandler,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pcoded-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pcoded-content\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pcoded-inner-content\",\n                children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"main-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"page-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(Suspense, {\n                      fallback: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 70,\n                        columnNumber: 65\n                      }, this),\n                      children: /*#__PURE__*/_jsxDEV(Switch, {\n                        children: menu\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 71,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    defaultPath: state.defaultPath,\n    isFullScreen: state.isFullScreen,\n    collapseMenu: state.collapseMenu,\n    configBlock: state.configBlock,\n    layout: state.layout\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFullScreenExit: () => dispatch({\n      type: actionTypes.FULL_SCREEN_EXIT\n    }),\n    onComponentWillMount: () => dispatch({\n      type: actionTypes.COLLAPSE_MENU\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(windowSize(AdminLayout));","map":{"version":3,"sources":["/Users/mazigh/Desktop/iots/IoTs-frontend/src/layout/AdminLayout/index.js"],"names":["React","Component","Suspense","Route","Switch","Redirect","connect","Fullscreen","windowSize","Navigation","NavBar","Breadcrumb","Loader","routes","Aux","actionTypes","AdminLayout","fullScreenExitHandler","document","fullscreenElement","webkitIsFullScreen","mozFullScreen","msFullscreenElement","props","onFullScreenExit","componentWillMount","windowWidth","layout","onComponentWillMount","mobileOutClickHandler","collapseMenu","render","addEventListener","menu","map","route","index","component","path","exact","name","isFullScreen","mapStateToProps","state","defaultPath","configBlock","mapDispatchToProps","dispatch","type","FULL_SCREEN_EXIT","COLLAPSE_MENU"],"mappings":"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","sourcesContent":["import React, { Component, Suspense } from 'react';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport Fullscreen from \"react-full-screen\";\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Navigation from './Navigation';\r\nimport NavBar from './NavBar';\r\nimport Breadcrumb from './Breadcrumb';\r\nimport Loader from \"../Loader\";\r\nimport routes from \"../../util/routes\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport * as actionTypes from \"../../store/actions\";\r\n\r\nimport './app.scss';\r\n\r\nclass AdminLayout extends Component {\r\n\r\n    fullScreenExitHandler = () => {\r\n        if (!document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\r\n            this.props.onFullScreenExit();\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.windowWidth > 992 && this.props.windowWidth <= 1024 && this.props.layout !== 'horizontal') {\r\n            this.props.onComponentWillMount();\r\n        }\r\n    }\r\n\r\n    mobileOutClickHandler() {\r\n        if (this.props.windowWidth < 992 && this.props.collapseMenu) {\r\n            this.props.onComponentWillMount();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        /* full screen exit call */\r\n        document.addEventListener('fullscreenchange', this.fullScreenExitHandler);\r\n        document.addEventListener('webkitfullscreenchange', this.fullScreenExitHandler);\r\n        document.addEventListener('mozfullscreenchange', this.fullScreenExitHandler);\r\n        document.addEventListener('MSFullscreenChange', this.fullScreenExitHandler);\r\n\r\n        const menu = routes.map((route, index) => {\r\n            return (route.component) ? (\r\n                <Route\r\n                    key={index}\r\n                    path={route.path}\r\n                    exact={route.exact}\r\n                    name={route.name}\r\n                    render={props => (\r\n                        <route.component {...props} />\r\n                    )} />\r\n            ) : (null);\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <Fullscreen enabled={this.props.isFullScreen}>\r\n                    <Navigation />\r\n                    <NavBar />\r\n                    <div className=\"pcoded-main-container\" onClick={() => this.mobileOutClickHandler}>\r\n                        <div className=\"pcoded-wrapper\">\r\n                            <div className=\"pcoded-content\">\r\n                                <div className=\"pcoded-inner-content\">\r\n                                    <Breadcrumb />\r\n                                    <div className=\"main-body\">\r\n                                        <div className=\"page-wrapper\">\r\n                                            <Suspense fallback={<Loader/>}>\r\n                                                <Switch>\r\n                                                    {menu}\r\n                                                    {/* <Redirect from=\"/admin\" to={this.props.defaultPath} /> */}\r\n                                                    \r\n                                                </Switch>\r\n                                            </Suspense>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Fullscreen>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        defaultPath: state.defaultPath,\r\n        isFullScreen: state.isFullScreen,\r\n        collapseMenu: state.collapseMenu,\r\n        configBlock: state.configBlock,\r\n        layout: state.layout\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFullScreenExit: () => dispatch({type: actionTypes.FULL_SCREEN_EXIT}),\r\n        onComponentWillMount: () => dispatch({type: actionTypes.COLLAPSE_MENU})\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (windowSize(AdminLayout));"]},"metadata":{},"sourceType":"module"}