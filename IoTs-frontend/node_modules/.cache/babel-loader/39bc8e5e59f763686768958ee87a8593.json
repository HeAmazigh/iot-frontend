{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n      throw error;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return activeHttpRequests.current.forEach(abortctrl => abortctrl.abort());\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};\n\n_s(useHttpClient, \"5LFg9Ro/5iGJ4ehzHD/qJSt5Ojo=\");","map":{"version":3,"sources":["/Users/mazigh/Desktop/iots/IoTs-frontend/iots-frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","clearError","forEach","abortctrl","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAAC,OAAOU,GAAP,EAAYC,MAAM,GAAE,KAApB,EAA2BC,IAAI,GAAE,IAAjC,EAAuCC,OAAO,GAAE,EAAhD,KAAuD;AACnFR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AACA,QAAG;AACC,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,OAAhB;AAAyBO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAA/C,OAAN,CAA5B;AAEA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AAEAd,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BO,MAA3B,CACzBC,OAAO,IAAIA,OAAO,KAAKV,aADE,CAA7B;;AAIA,UAAI,CAACI,QAAQ,CAACO,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACH;;AAEDtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACH,KAfD,CAeC,OAAOf,KAAP,EAAc;AACXC,MAAAA,QAAQ,CAACD,KAAK,CAACqB,OAAP,CAAR;AACAtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMC,KAAN;AACH;AACJ,GAxB8B,EAwB5B,EAxB4B,CAA/B;;AA0BA,QAAMsB,UAAU,GAAG,MAAM;AACrBrB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOM,kBAAkB,CAACQ,OAAnB,CAA2Ba,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD,CAAP;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACH3B,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHG,IAAAA,WAHG;AAIHmB,IAAAA;AAJG,GAAP;AAMH,CA9CM;;GAAMzB,a","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(async (url, method= 'GET', body= null, headers= {}) => {\r\n        setIsLoading(true);\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n        try{\r\n            const response = await fetch(url, { method, body, headers, signal: httpAbortCtrl.signal});\r\n\r\n            const responseData = await response.json();\r\n            \r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                reqCtrl => reqCtrl !== httpAbortCtrl\r\n            );\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            setIsLoading(false);\r\n            return responseData;\r\n        }catch (error) {\r\n            setError(error.message);\r\n            setIsLoading(false);\r\n            throw error;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        return activeHttpRequests.current.forEach(abortctrl => abortctrl.abort());\r\n    }, [])\r\n\r\n    return {\r\n        isLoading,\r\n        error,\r\n        sendRequest,\r\n        clearError\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}