{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n\n  const [token, setToken] = useState(false);\n  const [expirationToken, setExpirationToken] = useState();\n  const [userId, setUserId] = useState(false);\n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid); //set the expiration date for token\n\n    const expirationTokenDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setExpirationToken(expirationTokenDate); //use localStorage to store userId and token to save the login wan refrecheng the brawser\n\n    localStorage.setItem('userData', JSON.stringify({\n      userId: uid,\n      token: token,\n      expiration: expirationTokenDate.toISOString()\n    }));\n  }, []);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]);\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setExpirationToken(null);\n    localStorage.removeItem('userData');\n  }, []);\n  useEffect(() => {\n    if (token && expirationToken) {\n      const remainingTime = expirationToken.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, expirationToken]);\n  return {\n    userId,\n    token,\n    login,\n    logout\n  };\n};\n\n_s(useAuth, \"ny/U5PZdPJBuaejtzHmmhLkcgVo=\");","map":{"version":3,"sources":["/Users/mazigh/Desktop/iots/IoTs-frontend/iots-frontend/src/shared/hooks/auth-hook.js"],"names":["useState","useEffect","useCallback","logoutTimer","useAuth","token","setToken","expirationToken","setExpirationToken","userId","setUserId","login","uid","expirationDate","expirationTokenDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","storedData","parse","getItem","logout","removeItem","remainingTime","setTimeout","clearTimeout"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AAEA,IAAIC,WAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,EAAtD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMW,KAAK,GAAGT,WAAW,CAAC,CAACU,GAAD,EAAMP,KAAN,EAAaQ,cAAb,KAAgC;AACtDP,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAK,IAAAA,SAAS,CAACE,GAAD,CAAT,CAFsD,CAGtD;;AACA,UAAME,mBAAmB,GAAGD,cAAc,IAAI,IAAIE,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,EAAP,GAAY,EAA5C,CAA9C;AACAR,IAAAA,kBAAkB,CAACM,mBAAD,CAAlB,CALsD,CAMtD;;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe;AAC5CX,MAAAA,MAAM,EAAEG,GADoC;AAE5CP,MAAAA,KAAK,EAAEA,KAFqC;AAG5CgB,MAAAA,UAAU,EAAEP,mBAAmB,CAACQ,WAApB;AAHgC,KAAf,CAAjC;AAKH,GAZwB,EAYtB,EAZsB,CAAzB;AAcArB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMsB,UAAU,GAAGJ,IAAI,CAACK,KAAL,CAAWP,YAAY,CAACQ,OAAb,CAAqB,UAArB,CAAX,CAAnB;;AACA,QAAIF,UAAU,IAAIA,UAAU,CAAClB,KAAzB,IAAkC,IAAIU,IAAJ,CAASQ,UAAU,CAACF,UAApB,IAAkC,IAAIN,IAAJ,EAAxE,EAAoF;AAChFJ,MAAAA,KAAK,CAACY,UAAU,CAACd,MAAZ,EAAoBc,UAAU,CAAClB,KAA/B,EAAsC,IAAIU,IAAJ,CAASQ,UAAU,CAACF,UAApB,CAAtC,CAAL;AACH;AACJ,GALQ,EAKN,CAACV,KAAD,CALM,CAAT;AAOA,QAAMe,MAAM,GAAGxB,WAAW,CAAC,MAAM;AAC7BI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAS,IAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB;AACH,GALyB,EAKvB,EALuB,CAA1B;AAOA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,KAAK,IAAIE,eAAb,EAA8B;AAC1B,YAAMqB,aAAa,GAAGrB,eAAe,CAACS,OAAhB,KAA4B,IAAID,IAAJ,GAAWC,OAAX,EAAlD;AACAb,MAAAA,WAAW,GAAG0B,UAAU,CAACH,MAAD,EAASE,aAAT,CAAxB;AACH,KAHD,MAGO;AACHE,MAAAA,YAAY,CAAC3B,WAAD,CAAZ;AACH;AAEJ,GARQ,EAQN,CAACE,KAAD,EAAQqB,MAAR,EAAgBnB,eAAhB,CARM,CAAT;AAUA,SAAO;AAACE,IAAAA,MAAD;AAASJ,IAAAA,KAAT;AAAgBM,IAAAA,KAAhB;AAAuBe,IAAAA;AAAvB,GAAP;AACH,CA5CM;;GAAMtB,O","sourcesContent":["import {useState, useEffect, useCallback} from 'react';\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(false);\r\n    const [expirationToken, setExpirationToken] = useState();\r\n    const [userId, setUserId] = useState(false);\r\n\r\n    const login = useCallback((uid, token, expirationDate) => {\r\n        setToken(token);\r\n        setUserId(uid);\r\n        //set the expiration date for token\r\n        const expirationTokenDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n        setExpirationToken(expirationTokenDate);\r\n        //use localStorage to store userId and token to save the login wan refrecheng the brawser\r\n        localStorage.setItem('userData', JSON.stringify({\r\n            userId: uid,\r\n            token: token,\r\n            expiration: expirationTokenDate.toISOString()\r\n        }));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const storedData = JSON.parse(localStorage.getItem('userData'));\r\n        if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\r\n            login(storedData.userId, storedData.token, new Date(storedData.expiration));\r\n        }\r\n    }, [login]);\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null);\r\n        setUserId(null);\r\n        setExpirationToken(null);\r\n        localStorage.removeItem('userData');\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (token && expirationToken) {\r\n            const remainingTime = expirationToken.getTime() - new Date().getTime();\r\n            logoutTimer = setTimeout(logout, remainingTime);\r\n        } else {\r\n            clearTimeout(logoutTimer);\r\n        }\r\n    \r\n    }, [token, logout, expirationToken]);\r\n\r\n    return {userId, token, login, logout};\r\n};"]},"metadata":{},"sourceType":"module"}